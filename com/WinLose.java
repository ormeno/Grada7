package com;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple13;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class WinLose extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b5060008054600160a060020a0319163317815567016345785d8a0000600155600a6004556003819055600255612bf28061004b6000396000f3fe6080604052600436106100df576000357c0100000000000000000000000000000000000000000000000000000000900480638a0bd4161161009c578063b25a5f0b11610076578063b25a5f0b146101ff578063e310e18714610214578063e4dc4f5514610227578063fc6141de1461023a576100df565b80638a0bd416146101a9578063915eb32f146101d75780639e66e0f3146101ea576100df565b80630591c644146100e457806323cb87a514610126578063318d4e401461013b57806342c04c451461015d578063498c62891461017257806351d382b014610187575b600080fd5b3480156100f057600080fd5b506101046100ff366004612272565b61025a565b60405161011d9d9c9b9a9998979695949392919061298e565b60405180910390f35b610139610134366004612341565b61069a565b005b34801561014757600080fd5b50610150610a3c565b60405161011d919061296c565b34801561016957600080fd5b50610150610a42565b34801561017e57600080fd5b50610150610a72565b34801561019357600080fd5b5061019c610a78565b60405161011d91906125f3565b3480156101b557600080fd5b506101c96101c43660046122cd565b610b3e565b60405161011d929190612975565b6101396101e53660046122fc565b610c00565b3480156101f657600080fd5b506101506110ec565b34801561020b57600080fd5b506101506110f2565b6101396102223660046122fc565b6110f7565b610139610235366004612247565b611608565b34801561024657600080fd5b506101396102553660046122b5565b6116bd565b6000806060808080808580808080808d6102905760078f60405161027e91906124be565b9081526020016040518091039020549d505b60008e81526008602052604090208054600182015460029092018054919f50919d506102bb90612aef565b80601f01602080910402602001604051908101604052809291908181526020018280546102e790612aef565b80156103345780601f1061030957610100808354040283529160200191610334565b820191906000526020600020905b81548152906001019060200180831161031757829003601f168201915b50505050509a50600860008f8152602001908152602001600020600301805461035c90612aef565b80601f016020809104026020016040519081016040528092919081815260200182805461038890612aef565b80156103d55780601f106103aa576101008083540402835291602001916103d5565b820191906000526020600020905b8154815290600101906020018083116103b857829003601f168201915b50505050509950600860008f815260200190815260200160002060040180546103fd90612aef565b80601f016020809104026020016040519081016040528092919081815260200182805461042990612aef565b80156104765780601f1061044b57610100808354040283529160200191610476565b820191906000526020600020905b81548152906001019060200180831161045957829003601f168201915b50505050509850600860008f8152602001908152602001600020600501805461049e90612aef565b80601f01602080910402602001604051908101604052809291908181526020018280546104ca90612aef565b80156105175780601f106104ec57610100808354040283529160200191610517565b820191906000526020600020905b8154815290600101906020018083116104fa57829003601f168201915b50505050509750600860008f8152602001908152602001600020600601805461053f90612aef565b80601f016020809104026020016040519081016040528092919081815260200182805461056b90612aef565b80156105b85780601f1061058d576101008083540402835291602001916105b8565b820191906000526020600020905b81548152906001019060200180831161059b57829003601f168201915b50505050509650600860008f8152602001908152602001600020600701549550600860008f8152602001908152602001600020600801549450600860008f815260200190815260200160002060090160009054906101000a9004600160a060020a03169350600860008f815260200190815260200160002060090160149054906101000a900463ffffffff169250600860008f815260200190815260200160002060090160189054906101000a900463ffffffff169150600860008f8152602001908152602001600020600a015490509295989b9e9194979a9d509295989b50565b3460015481146106a957600080fd5b600454600554106106d85760405160e560020a62461bcd0281526004016106cf906128d8565b60405180910390fd5b6106e187611bb0565b156107015760405160e560020a62461bcd0281526004016106cf90612679565b63ffffffff8216158061071a57508163ffffffff166001145b8061072b57508163ffffffff166002145b8061073c57508163ffffffff166003145b61075b5760405160e560020a62461bcd0281526004016106cf9061280d565b6003805490600061076b83612b2d565b9091555050600354600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f018190556040516007906107b9908a906124be565b9081526040805160209281900383019020929092556003805460008181526008845284812091825560019091018c905590548152919091208851610805926002909201918a019061203f565b50600380546000908152600860209081526040909120885161082e93919091019189019061203f565b50600354600090815260086020908152604090912086516108579260049092019188019061203f565b50600354600090815260086020908152604090912085516108809260059092019187019061203f565b50600380546000908152600860205260408082206009908101805473ffffffffffffffffffffffffffffffffffffffff19163317905583548352818320810180547bffffffff000000000000000000000000000000000000000000000000191660c060020a17905583548352818320600a0187905592548252902001805463ffffffff8416740100000000000000000000000000000000000000000277ffffffff00000000000000000000000000000000000000001990911617905560025461094a903490612a5d565b6002556040805160a081018252600354815260208082018a8152928201889052606082018790526000608083018190526005805460018101825591819052835191027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db08101918255935180519394859492936109ec937f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db190920192019061203f565b5060408201518051610a0891600284019160209091019061203f565b5060608201518051610a2491600384019160209091019061203f565b50608082015181600401555050505050505050505050565b60025481565b60008054600160a060020a03163314610a5a57600080fd5b600280546000909155610a6d3382611608565b905090565b60035481565b60608060005b600554811015610b3857600060058281548110610aae5760e060020a634e487b7102600052603260045260246000fd5b90600052602060002090600502016004015490508260058381548110610ae75760e060020a634e487b7102600052603260045260246000fd5b9060005260206000209060050201600101610b0183611cb1565b604051602001610b13939291906124da565b6040516020818303038152906040529250508080610b3090612b2d565b915050610a7e565b50905090565b6000828152600860209081526040808320600160a060020a0385168452600c01909152902080546001909101805460609190610b7990612aef565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba590612aef565b8015610bf25780601f10610bc757610100808354040283529160200191610bf2565b820191906000526020600020905b815481529060010190602001808311610bd557829003601f168201915b505050505090509250929050565b610c0982611e2d565b610c285760405160e560020a62461bcd0281526004016106cf9061270d565b6000828152600860205260409020600981015460c060020a900463ffffffff16600114610c6a5760405160e560020a62461bcd0281526004016106cf906127d6565b610c748333611e8d565b15610c945760405160e560020a62461bcd0281526004016106cf906126d6565b600083815260086020526040902060010154341015610cc85760405160e560020a62461bcd0281526004016106cf90612744565b600b8101546103e811610cf05760405160e560020a62461bcd0281526004016106cf9061260d565b610d8682826004018054610d0390612aef565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2f90612aef565b8015610d7c5780601f10610d5157610100808354040283529160200191610d7c565b820191906000526020600020905b815481529060010190602001808311610d5f57829003601f168201915b5050505050611f6e565b80610d9f5750610d9f82826005018054610d0390612aef565b610dbe5760405160e560020a62461bcd0281526004016106cf90612779565b600b810180546001818101835560009283526020808420909201805473ffffffffffffffffffffffffffffffffffffffff1916339081179091558352600c8401825260409092203481558451610e1b93919091019185019061203f565b50610e2f82826004018054610d0390612aef565b15610e535734816007016000828254610e489190612a5d565b90915550610e6d9050565b34816008016000828254610e679190612a5d565b90915550505b600061109a6005805480602002602001604051908101604052809291908181526020016000905b8282101561109057838290600052602060002090600502016040518060a001604052908160008201548152602001600182018054610ed190612aef565b80601f0160208091040260200160405190810160405280929190818152602001828054610efd90612aef565b8015610f4a5780601f10610f1f57610100808354040283529160200191610f4a565b820191906000526020600020905b815481529060010190602001808311610f2d57829003601f168201915b50505050508152602001600282018054610f6390612aef565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8f90612aef565b8015610fdc5780601f10610fb157610100808354040283529160200191610fdc565b820191906000526020600020905b815481529060010190602001808311610fbf57829003601f168201915b50505050508152602001600382018054610ff590612aef565b80601f016020809104026020016040519081016040528092919081815260200182805461102190612aef565b801561106e5780601f106110435761010080835404028352916020019161106e565b820191906000526020600020905b81548152906001019060200180831161105157829003601f168201915b5050505050815260200160048201548152505081526020019060010190610e94565b5050505085611fc7565b905034600582815481106110c15760e060020a634e487b7102600052603260045260246000fd5b906000526020600020906005020160040160008282546110e19190612a5d565b909155505050505050565b60015481565b303190565b61110082611e2d565b61111f5760405160e560020a62461bcd0281526004016106cf9061270d565b60008281526008602052604090206009810154600160a060020a0316331461115c5760405160e560020a62461bcd0281526004016106cf90612935565b600981015460c060020a900463ffffffff166002146111905760405160e560020a62461bcd0281526004016106cf90612844565b6111a382826004018054610d0390612aef565b806111bc57506111bc82826005018054610d0390612aef565b6111db5760405160e560020a62461bcd0281526004016106cf9061287b565b6111e36120c3565b600080600080600080806000808a600b0180548060200260200160405190810160405280929190818152602001828054801561124857602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161122a575b5050505050905060005b81518110156113a15781818151811061127e5760e060020a634e487b7102600052603260045260246000fd5b602002602001015192506113448c600c01600085600160a060020a0316600160a060020a0316815260200190815260200160002060010180546112c090612aef565b80601f01602080910402602001604051908101604052809291908181526020018280546112ec90612aef565b80156113395780601f1061130e57610100808354040283529160200191611339565b820191906000526020600020905b81548152906001019060200180831161131c57829003601f168201915b50505050508e611f6e565b1561138f57828b8b6103e8811061136e5760e060020a634e487b7102600052603260045260246000fd5b600160a060020a0390921660209290920201528961138b81612b2d565b9a50505b8061139981612b2d565b915050611252565b506113b58c8c6004018054610d0390612aef565b156113cd578a6008015497508a6007015496506113dc565b8a6007015497508a6008015496505b60005b898110156115695760008b826103e8811061140d5760e060020a634e487b7102600052603260045260246000fd5b6020020151600160a060020a03161461144c578a816103e881106114445760e060020a634e487b7102600052603260045260246000fd5b602002015194505b600160a060020a0385166000908152600c8d0160205260409020549350612710886114778b83612a89565b6114819190612a75565b61148d90612710612a5d565b6114979086612a89565b6114a19190612a75565b60098d015490965074010000000000000000000000000000000000000000900463ffffffff16156115195760098c01546000906064906114ff9074010000000000000000000000000000000000000000900463ffffffff1689612a89565b6115099190612a75565b90506115158188612aa8565b9650505b6115238688612a5d565b96506115578b826103e8811061154c5760e060020a634e487b7102600052603260045260246000fd5b602002015187611608565b8061156181612b2d565b9150506113df565b5060098b0180547bffffffff00000000000000000000000000000000000000000000000019167803000000000000000000000000000000000000000000000000179081905563ffffffff7401000000000000000000000000000000000000000090910416156115f95760098b01546115f990600160a060020a0316876115ef8b8b612a5d565b6102359190612aa8565b50505050505050505050505050565b60608260405160200161161b91906125a7565b604051602081830303815290604052905060008084600160a060020a0316846108fc9060405161164a906125f0565b600060405180830381858888f193505050503d8060008114611688576040519150601f19603f3d011682016040523d82523d6000602084013e61168d565b606091505b50915091508183906116b55760405160e560020a62461bcd0281526004016106cf91906125f3565b505050505050565b6116c681611e2d565b6116e55760405160e560020a62461bcd0281526004016106cf9061270d565b60008181526008602052604090206009810154600160a060020a031633146117225760405160e560020a62461bcd0281526004016106cf90612935565b600981015460c060020a900463ffffffff166001146117565760405160e560020a62461bcd0281526004016106cf906127d6565b60006119836005805480602002602001604051908101604052809291908181526020016000905b8282101561197957838290600052602060002090600502016040518060a0016040529081600082015481526020016001820180546117ba90612aef565b80601f01602080910402602001604051908101604052809291908181526020018280546117e690612aef565b80156118335780601f1061180857610100808354040283529160200191611833565b820191906000526020600020905b81548152906001019060200180831161181657829003601f168201915b5050505050815260200160028201805461184c90612aef565b80601f016020809104026020016040519081016040528092919081815260200182805461187890612aef565b80156118c55780601f1061189a576101008083540402835291602001916118c5565b820191906000526020600020905b8154815290600101906020018083116118a857829003601f168201915b505050505081526020016003820180546118de90612aef565b80601f016020809104026020016040519081016040528092919081815260200182805461190a90612aef565b80156119575780601f1061192c57610100808354040283529160200191611957565b820191906000526020600020905b81548152906001019060200180831161193a57829003601f168201915b505050505081526020016004820154815250508152602001906001019061177d565b5050505084611fc7565b9050600581815481106119a95760e060020a634e487b7102600052603260045260246000fd5b600091825260208220600590910201818155906119c960018301826120e3565b6119d76002830160006120e3565b6119e56003830160006120e3565b50600060049190910155805b600554611a0090600190612aa8565b811015611afa576005611a14826001612a5d565b81548110611a355760e060020a634e487b7102600052603260045260246000fd5b906000526020600020906005020160058281548110611a675760e060020a634e487b7102600052603260045260246000fd5b9060005260206000209060050201600082015481600001556001820181600101908054611a9390612aef565b611a9e929190612122565b506002820181600201908054611ab390612aef565b611abe929190612122565b506003820181600301908054611ad390612aef565b611ade929190612122565b5060049182015491015580611af281612b2d565b9150506119f1565b506005805480611b1d5760e060020a634e487b7102600052603160045260246000fd5b60008281526020812060056000199093019283020181815590611b4360018301826120e3565b611b516002830160006120e3565b611b5f6003830160006120e3565b5060006004919091015590555060090180547bffffffff0000000000000000000000000000000000000000000000001916780200000000000000000000000000000000000000000000000017905550565b6000805b600554811015611ca657611c8560058281548110611be55760e060020a634e487b7102600052603260045260246000fd5b90600052602060002090600502016001018054611c0190612aef565b80601f0160208091040260200160405190810160405280929190818152602001828054611c2d90612aef565b8015611c7a5780601f10611c4f57610100808354040283529160200191611c7a565b820191906000526020600020905b815481529060010190602001808311611c5d57829003601f168201915b505050505084611f6e565b15611c94576001915050611cac565b80611c9e81612b2d565b915050611bb4565b50600090505b919050565b606081611cf2575060408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152611cac565b8160005b8115611d1c5780611d0681612b2d565b9150611d159050600a83612a75565b9150611cf6565b60008167ffffffffffffffff811115611d485760e060020a634e487b7102600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d72576020820181803683370190505b5090505b8415611e2557611d87600183612aa8565b9150611d94600a86612b48565b611d9f906030612a5d565b7f010000000000000000000000000000000000000000000000000000000000000002818381518110611de45760e060020a634e487b7102600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611e1e600a86612a75565b9450611d76565b949350505050565b6000805b600654811015611ca6578260068281548110611e605760e060020a634e487b7102600052603260045260246000fd5b90600052602060002001541415611e7b576001915050611cac565b80611e8581612b2d565b915050611e31565b6000828152600860209081526040808320600b0180548251818502810185019093528083528493830182828015611eed57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611ecf575b5050505050905060005b8151811015611f615783600160a060020a0316828281518110611f2d5760e060020a634e487b7102600052603260045260246000fd5b6020026020010151600160a060020a03161415611f4f57600192505050611f68565b80611f5981612b2d565b915050611ef7565b5060009150505b92915050565b600081604051602001611f8191906124be565b6040516020818303038152906040528051906020012083604051602001611fa891906124be565b6040516020818303038152906040528051906020012014905092915050565b6000805b83518110156120235782848281518110611ff85760e060020a634e487b7102600052603260045260246000fd5b6020026020010151600001511415612011579050611f68565b8061201b81612b2d565b915050611fcb565b5060405160e560020a62461bcd0281526004016106cf90612642565b82805461204b90612aef565b90600052602060002090601f01602090048101928261206d57600085556120b3565b82601f1061208657805160ff19168380011785556120b3565b828001600101855582156120b3579182015b828111156120b3578251825591602001919060010190612098565b506120bf92915061219d565b5090565b60405180617d0001604052806103e8906020820280368337509192915050565b5080546120ef90612aef565b6000825580601f10612101575061211f565b601f01602090049060005260206000209081019061211f919061219d565b50565b82805461212e90612aef565b90600052602060002090601f01602090048101928261215057600085556120b3565b82601f1061216157805485556120b3565b828001600101855582156120b357600052602060002091601f016020900482015b828111156120b3578254825591600101919060010190612182565b5b808211156120bf576000815560010161219e565b600082601f8301126121c2578081fd5b813567ffffffffffffffff808211156121dd576121dd612b8e565b604051601f8301601f19168101602001828111828210171561220157612201612b8e565b604052828152848301602001861015612218578384fd5b82602086016020830137918201602001929092529392505050565b803563ffffffff81168114611cac57600080fd5b60008060408385031215612259578182fd5b823561226481612ba7565b946020939093013593505050565b60008060408385031215612284578182fd5b823567ffffffffffffffff81111561229a578283fd5b6122a6858286016121b2565b95602094909401359450505050565b6000602082840312156122c6578081fd5b5035919050565b600080604083850312156122df578182fd5b8235915060208301356122f181612ba7565b809150509250929050565b6000806040838503121561230e578182fd5b82359150602083013567ffffffffffffffff81111561232b578182fd5b612337858286016121b2565b9150509250929050565b600080600080600080600060e0888a03121561235b578283fd5b87359650602088013567ffffffffffffffff80821115612379578485fd5b6123858b838c016121b2565b975060408a013591508082111561239a578485fd5b6123a68b838c016121b2565b965060608a01359150808211156123bb578485fd5b6123c78b838c016121b2565b955060808a01359150808211156123dc578485fd5b506123e98a828b016121b2565b93505060a088013591506123ff60c08901612233565b905092959891949750929550565b600160a060020a03169052565b60008151808452612432816020860160208601612abf565b601f01601f19169290920160200192915050565b60008151612458818560208601612abf565b9290920192915050565b7f3f00000000000000000000000000000000000000000000000000000000000000815260010190565b7f2600000000000000000000000000000000000000000000000000000000000000815260010190565b63ffffffff169052565b600082516124d0818460208701612abf565b9190910192915050565b6000845160206124ed8285838a01612abf565b85549184019183906002810460018083168061250a57607f831692505b85831081141561252b5760e060020a634e487b710288526022600452602488fd5b80801561253f57600181146125505761257c565b60ff1985168852838801955061257c565b6125598c612a51565b895b858110156125745781548a82015290840190880161255b565b505083880195505b505050505061259b6125966125908361248b565b88612446565b612462565b98975050505050505050565b7f4661696c656420746f2073656e6420457468657220746f3a20000000000000008152600160a060020a03919091166c01000000000000000000000000026019820152602d0190565b90565b600060208252612606602083018461241a565b9392505050565b6020808252818101527f4e6f207365207065726d6974656e206d61732064652061706f7374616e746573604082015260600190565b60208082526009908201527f4e6f7420466f756e640000000000000000000000000000000000000000000000604082015260600190565b60208082526021908201527f506f727261206162696572746120636f6e20656c206d69736d6f206e6f6d627260408201527f6500000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f4c6120616464726573732079612068612061706f737461646f00000000000000604082015260600190565b60208082526011908201527f41707565737461204e4f20657869737465000000000000000000000000000000604082015260600190565b6020808252818101527f56616c6f72206465206c61206170756573746120696e737566696369656e7465604082015260600190565b6020808252602a908201527f45717569706f206e6f206578697374656e746520656e206c612061707565737460408201527f6120696e64696361646100000000000000000000000000000000000000000000606082015260800190565b60208082526012908201527f41707565737461204e4f20416269657274610000000000000000000000000000604082015260600190565b60208082526017908201527f506f7263656e74616a65206e6f207065726d697469646f000000000000000000604082015260600190565b60208082526012908201527f41707565737461204e4f20436572726164610000000000000000000000000000604082015260600190565b6020808252602b908201527f47616e61646f7220696e64696361646f206e6f206578697374656e746520656e60408201527f206c612061707565737461000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f5365206861206c6c656761646f20616c206d6178696d6f20646520617075657360408201527f7461732061626965727461730000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f4e6f2070726f706965746172696f206465206c61206170756573746100000000604082015260600190565b90815260200190565b600083825260406020830152611e25604083018461241a565b60006101a08f83528e60208401528060408401526129ae8184018f61241a565b905082810360608401526129c2818e61241a565b905082810360808401526129d6818d61241a565b905082810360a08401526129ea818c61241a565b905082810360c08401526129fe818b61241a565b9150508760e083015286610100830152612a1c61012083018761240d565b612a2a6101408301866124b4565b612a386101608301856124b4565b826101808301529e9d5050505050505050505050505050565b60009081526020902090565b60008219821115612a7057612a70612b5c565b500190565b600082612a8457612a84612b75565b500490565b6000816000190483118215151615612aa357612aa3612b5c565b500290565b600082821015612aba57612aba612b5c565b500390565b60005b83811015612ada578181015183820152602001612ac2565b83811115612ae9576000848401525b50505050565b600281046001821680612b0357607f821691505b60208210811415612b275760e060020a634e487b7102600052602260045260246000fd5b50919050565b6000600019821415612b4157612b41612b5c565b5060010190565b600082612b5757612b57612b75565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a038116811461211f57600080fdfea264697066735822122072e9314b5d49995a44e31e7221abf97f0ddf6e374870c78cf7925b4de53b89f364736f6c63430008000033";

    public static final String FUNC_BALANCEOWNERCONTRATO = "balanceOwnerContrato";

    public static final String FUNC_CONTADORID = "contadorId";

    public static final String FUNC_PRECIO = "precio";

    public static final String FUNC_ADDBET = "addBet";

    public static final String FUNC_LISTADOABIERTASSTRING = "listadoAbiertasString";

    public static final String FUNC_GETBET = "getBet";

    public static final String FUNC_GETBETPLAYERINFO = "getBetPlayerInfo";

    public static final String FUNC_BET = "bet";

    public static final String FUNC_CERRARAPUESTA = "cerrarApuesta";

    public static final String FUNC_DISTRIBUTEPRIZES = "distributePrizes";

    public static final String FUNC_GETBALANCECONTRATO = "getBalanceContrato";

    public static final String FUNC_RETIRARBALANCEOWNERCONTRATO = "retirarBalanceOwnerContrato";

    public static final String FUNC_SENDVIACALL = "sendViaCall";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("5777", "0x9e0d3FF55EEC2dDd2F590cC8D62268223A4E3C67");
    }

    @Deprecated
    protected WinLose(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WinLose(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected WinLose(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected WinLose(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<BigInteger> balanceOwnerContrato() {
        final Function function = new Function(FUNC_BALANCEOWNERCONTRATO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> contadorId() {
        final Function function = new Function(FUNC_CONTADORID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> precio() {
        final Function function = new Function(FUNC_PRECIO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addBet(BigInteger _minimumBet, String _titulo, String _descripcion, String _teamOne, String _teamTwo, BigInteger _idTelegram, BigInteger _porcentajeOwner, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_ADDBET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_minimumBet), 
                new org.web3j.abi.datatypes.Utf8String(_titulo), 
                new org.web3j.abi.datatypes.Utf8String(_descripcion), 
                new org.web3j.abi.datatypes.Utf8String(_teamOne), 
                new org.web3j.abi.datatypes.Utf8String(_teamTwo), 
                new org.web3j.abi.datatypes.generated.Uint256(_idTelegram), 
                new org.web3j.abi.datatypes.generated.Uint32(_porcentajeOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<String> listadoAbiertasString() {
        final Function function = new Function(FUNC_LISTADOABIERTASSTRING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple13<BigInteger, BigInteger, String, String, String, String, String, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger>> getBet(String _titulo, BigInteger _id) {
        final Function function = new Function(FUNC_GETBET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_titulo), 
                new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple13<BigInteger, BigInteger, String, String, String, String, String, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple13<BigInteger, BigInteger, String, String, String, String, String, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple13<BigInteger, BigInteger, String, String, String, String, String, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple13<BigInteger, BigInteger, String, String, String, String, String, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (String) results.get(9).getValue(), 
                                (BigInteger) results.get(10).getValue(), 
                                (BigInteger) results.get(11).getValue(), 
                                (BigInteger) results.get(12).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<BigInteger, String>> getBetPlayerInfo(BigInteger _idBet, String _address) {
        final Function function = new Function(FUNC_GETBETPLAYERINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idBet), 
                new org.web3j.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, String>>(function,
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> bet(BigInteger _idBet, String _teamSelected, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_BET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idBet), 
                new org.web3j.abi.datatypes.Utf8String(_teamSelected)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> cerrarApuesta(BigInteger _idBet) {
        final Function function = new Function(
                FUNC_CERRARAPUESTA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idBet)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> distributePrizes(BigInteger _idBet, String _teamWinner, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_DISTRIBUTEPRIZES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_idBet), 
                new org.web3j.abi.datatypes.Utf8String(_teamWinner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> getBalanceContrato() {
        final Function function = new Function(FUNC_GETBALANCECONTRATO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> retirarBalanceOwnerContrato() {
        final Function function = new Function(
                FUNC_RETIRARBALANCEOWNERCONTRATO, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sendViaCall(String _to, BigInteger _val, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_SENDVIACALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_val)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    @Deprecated
    public static WinLose load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new WinLose(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static WinLose load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new WinLose(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static WinLose load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new WinLose(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static WinLose load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new WinLose(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<WinLose> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WinLose.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<WinLose> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WinLose.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<WinLose> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WinLose.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<WinLose> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WinLose.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
